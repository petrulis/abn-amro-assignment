AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  Env:
    Type: String
  TableName:
    Type: String
Resources:
  MessageRequestTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        Fn::Join:
          - "-"
          - - !Ref Env
            - !Ref TableName
      AttributeDefinitions:
        -
          AttributeName: "RecipientIdentifier"
          AttributeType: "S"
        -
          AttributeName: "RequestId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: RecipientIdentifier
          KeyType: HASH
        - AttributeName: RequestId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
  ScalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
  MessageRequestTableWriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Sub: "table/${Env}-${TableName}"
      RoleARN:
        Fn::GetAtt: [ScalingRole, Arn]
      ScalableDimension: "dynamodb:table:WriteCapacityUnits"
      ServiceNamespace: dynamodb
    DependsOn: MessageRequestTable
  MessageRequestWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: MessageRequestTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  MessageRequestTableReadCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Sub: "table/${Env}-${TableName}"
      RoleARN:
        Fn::GetAtt: [ScalingRole, Arn]
      ScalableDimension: "dynamodb:table:ReadCapacityUnits"
      ServiceNamespace: dynamodb
  MessageRequestReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: MessageRequestTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  History:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin/
      Events:
        Get:
          Properties:
            Method: get
            Path: /history
          Type: Api
        Options:
          Properties:
            Method: options
            Path: /history
          Type: Api
      Handler: bin/history
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                Fn::GetAtt: [MessageRequestTable, Arn]
      Environment:
        Variables:
          REGION:
            Fn::Sub: "${AWS::Region}"
          DDB_TABLE:
            Ref: MessageRequestTable
  Send:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin/
      Events:
        Delete:
          Properties:
            Method: post
            Path: /send
          Type: Api
        Options:
          Properties:
            Method: options
            Path: /send
          Type: Api
      Handler: bin/send
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                Fn::GetAtt: [MessageRequestTable, Arn]
      Environment:
        Variables:
          REGION:
            Fn::Sub: "${AWS::Region}"
          DDB_TABLE:
            Ref: MessageRequestTable
          DEFAULT_REGION: US
  JobSender:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./bin/
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
      Handler: bin/sender
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: '*'
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                Fn::GetAtt: [MessageRequestTable, Arn]
      Environment:
        Variables:
          REGION:
            Fn::Sub: "${AWS::Region}"
          DDB_TABLE:
            Ref: MessageRequestTable