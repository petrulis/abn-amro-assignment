Parameters:
  Env:
    Type: String
  Name:
    Type: String
  MinimumCompressionSize:
    Type: Number
  TableName:
    Type: String
Resources:
  MessageRequestTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        Fn::Join:
          - "-"
          - - !Ref Env
            - !Ref TableName
      AttributeDefinitions:
        -
          AttributeName: "RecipientIdentifier"
          AttributeType: "S"
        -
          AttributeName: "RequestId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: RecipientIdentifier
          KeyType: HASH
        - AttributeName: RequestId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
  ScalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
  MessageRequestTableWriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Sub: "table/${Env}-${TableName}"
      RoleARN:
        Fn::GetAtt: [ScalingRole, Arn]
      ScalableDimension: "dynamodb:table:WriteCapacityUnits"
      ServiceNamespace: dynamodb
    DependsOn: MessageRequestTable
  MessageRequestWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: MessageRequestTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  MessageRequestTableReadCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId:
        Fn::Sub: "table/${Env}-${TableName}"
      RoleARN:
        Fn::GetAtt: [ScalingRole, Arn]
      ScalableDimension: "dynamodb:table:ReadCapacityUnits"
      ServiceNamespace: dynamodb
  MessageRequestReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: MessageRequestTableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
  ApiGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - EDGE
      MinimumCompressionSize:
        Ref: MinimumCompressionSize
      Name:
        Ref: Name
  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name:
        Fn::Sub: "${AWS::StackName}-BodyValidator"
      RestApiId:
        Ref: RestApi
      ValidateRequestBody: true
      ValidateRequestParameters: false
  SendMessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt: [RestApi, RootResourceId]
      PathPart: "send"
  SendMessagePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: SendMessage
      HttpMethod: POST
      ResourceId:
        Ref: SendMessageResource
      RestApiId:
        Ref: RestApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Env}-${Name}-SendMessage/invocations"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ContentHandling: CONVERT_TO_TEXT
            StatusCode: 200
          - ContentHandling: CONVERT_TO_TEXT
            StatusCode: 400
        Credentials:
          Fn::GetAtt: [ApiGatewayRole, Arn]
      RequestValidatorId:
        Ref: RequestValidator
  HistoryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt: [RestApi, RootResourceId]
      PathPart: "history"
  HistoryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      OperationName: History
      HttpMethod: GET
      ResourceId:
        Ref: HistoryResource
      RestApiId:
        Ref: RestApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Env}-${Name}-history/invocations"
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - ContentHandling: CONVERT_TO_TEXT
            StatusCode: 200
          - ContentHandling: CONVERT_TO_TEXT
            StatusCode: 400
        Credentials:
          Fn::GetAtt: [ApiGatewayRole, Arn]
      RequestValidatorId:
        Ref: RequestValidator