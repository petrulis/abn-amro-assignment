AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  Owner:
    Type: String
  Repository:
    Type: String
  Branch:
    Type: String
  OAuthToken:
    Type: String
  TimeoutInMinutes:
    Type: Number
    Default: 10
  Environment:
    Type: String
  StackName:
    Type: String
  RouteTable:
    Type: String
Resources:
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RestartExecutionOnUpdate: true
      RoleArn:
        Fn::GetAtt: [CodePipelineRole, Arn]
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner:
                  Ref: Owner
                Repo:
                  Ref: Repository
                Branch:
                  Ref: Branch
                OAuthToken:
                  Ref: OAuthToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  Fn::Sub: '${AWS::StackName}-Project'
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ComputeChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn:
                    Fn::GetAtt: [CloudFormationRole, Arn]
                ChangeSetName: ChangeSet
                TemplatePath: BuildOutput::output.yml
                StackName:
                  Ref: StackName
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: |
                  {
                    "Env": { "Fn::GetParam" : ["BuildOutput", "params.json", "Env"]},
                    "TableName": { "Fn::GetParam" : ["BuildOutput", "params.json", "TableName"]}
                  }
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ChangeSet
                RoleArn:
                  Fn::GetAtt: [CloudFormationRole, Arn]
                StackName:
                  Ref: StackName
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: |
                  {
                    "Env": { "Fn::GetParam" : ["BuildOutput", "params.json", "Env"]},
                    "TableName": { "Fn::GetParam" : ["BuildOutput", "params.json", "TableName"]}
                  }
              RunOrder: 2
  CloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - 'cloudformation:*'
                  - 'iam:CreateRole'
                  - 'iam:AttachRolePolicy'
                  - 'iam:DetachRolePolicy'
                  - 'iam:GetRole'
                  - 'iam:DeleteRole'
                  - 'iam:PassRole'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:PutRolePolicy'
                  - 'lambda:CreateFunction'
                  - 'lambda:GetFunctionConfiguration'
                  - 'lambda:DeleteFunction'
                  - 'lambda:AddPermission'
                  - 'lambda:RemovePermission'
                  - 'lambda:UpdateFunctionCode'
                  - 's3:GetObject'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:DeleteTable'
                  - 'dynamodb:UpdateTable'
                  - 'dynamodb:CreateTable'
                  - 'application-autoscaling:*'
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                Resource: '*'
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactStore}/*'
                Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
              - Resource: '*'
                Effect: Allow
                Action:
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                  - 'iam:PassRole'
  VpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:GetObjectVersion'
            Resource:
              - Fn::Sub: 'arn:aws:s3:::${ArtifactStore}/*'
              - Fn::Sub: 'arn:aws:s3:::${TemplateBucket}/*'
      ServiceName:
        Fn::Sub: 'com.amazonaws.${AWS::Region}.s3'
      RouteTableIds:
        - !Ref RouteTable
      VpcId:
        Ref: VpcId
  ArtifactStore:
    Type: 'AWS::S3::Bucket'
    Properties: {}
  ArtifactStorePolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: ArtifactStore
      PolicyDocument:
        Statement:
          -
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:GetObjectVersion'
            Effect: "Allow"
            Resource:
              Fn::Sub: 'arn:aws:s3:::${ArtifactStore}/*'
            Principal: "*"
            Condition:
              StringEquals:
                aws:sourceVpce:
                  - !Ref VpcEndpoint
  TemplateBucket:
    Type: 'AWS::S3::Bucket'
    Properties: {}
  TemplateBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: TemplateBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - 's3:PutObject'
            Effect: "Allow"
            Resource:
              Fn::Sub: 'arn:aws:s3:::${TemplateBucket}/*'
            Principal: "*"
            Condition:
              StringEquals:
                aws:sourceVpce:
                  - !Ref VpcEndpoint
  CodeBuildSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: Codebuild Group
      GroupDescription: 'CodeBuild SecurityGroup'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VpcId
  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name:
        Fn::Sub: '${AWS::StackName}-Project'
      Description: Builds docker project
      VpcConfig:
        VpcId:
          Ref: VpcId
        Subnets:
          Ref: Subnets
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/golang:1.10'
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ENV
            Value:
              Ref: Environment
      ServiceRole:
        Ref: CodeBuildServiceRole
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes:
        Ref: TimeoutInMinutes
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                  - 'cloudwatch:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:GetObjectVersion'
                Resource:
                  Fn::Sub: 'arn:aws:s3:::${ArtifactStore}/*'
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:CreateNetworkInterfacePermission'
                Resource: '*'